// Generated by CoffeeScript 1.6.3
(function() {
  var BaseBackend, NotificationBackend,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseBackend = require('./baseBackend.js');

  NotificationBackend = (function(_super) {
    __extends(NotificationBackend, _super);

    function NotificationBackend(app) {
      this.app = app;
      this.create = __bind(this.create, this);
      this._notifications = {};
      this._notificationCounter = 0;
    }

    NotificationBackend.prototype.create = function(request, sendResponse) {
      var notificationSettings, now, opt;
      opt = {};
      notificationSettings = {};
      opt.type = request.params.type || "basic";
      opt.title = request.params.title || "-";
      opt.message = request.params.message || "-";
      opt.iconUrl = request.params.iconUrl || "img/128x128.png";
      notificationSettings.interval = request.params.notificationInterval || 3600000;
      now = new Date();
      notificationSettings.name = request.params.notificationName || ("note" + this._notificationCounter);
      if (!this._notifications[notificationSettings.name]) {
        this._notifications[notificationSettings.name] = {
          lastTime: now
        };
      }
      if (this._notifications[notificationSettings.name].lastTime.getTime() + notificationSettings.interval < now) {
        this._notifications[notificationSettings.name].lastTime = now;
      }
      if (this._notifications[notificationSettings.name].lastTime === now) {
        this._notificationCounter += 1;
        chrome.notifications.create(notificationSettings.name, opt, function() {});
        setTimeout(function() {
          return chrome.notifications.clear(notificationSettings.name, function() {});
        }, 5000);
      }
      return this.app.tracker.sendEvent('Background', 'notification was showed', opt.title);
    };

    return NotificationBackend;

  })(BaseBackend);

  module.exports = NotificationBackend;

}).call(this);

/*
//@ sourceMappingURL=notificationBackend.map
*/
