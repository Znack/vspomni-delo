// Generated by CoffeeScript 1.6.3
(function() {
  var exports, todoControllers, _removeItem, _today;

  todoControllers = angular.module('todoControllers', []);

  _today = new Date();

  _removeItem = function(arr, item) {
    var index;
    index = arr.indexOf(item);
    if (index > -1) {
      return arr.splice(index, 1);
    }
  };

  todoControllers.controller('TodoListCtrl', [
    '$scope', 'Todo', function($scope, Todo) {
      var _showActive;
      $scope.todos = Todo.query();
      _showActive = true;
      $scope.showActive = function() {
        var callback;
        if (arguments.length === 0) {
          return _showActive;
        }
        _showActive = arguments[0];
        callback = arguments[1];
        return $scope.loadTodos(callback);
      };
      $scope.loadTodos = function(callback) {
        var commonCallback;
        if (callback == null) {
          callback = null;
        }
        commonCallback = function(todos) {
          $scope.todos = todos;
          if (callback) {
            return callback(todos);
          }
        };
        if (_showActive) {
          return Todo.query(commonCallback);
        } else {
          return Todo.listOfRemoved(commonCallback);
        }
      };
      window.addEventListener('focus', function() {
        if ($scope.showActive()) {
          return $scope.showActive(true);
        }
      });
      $scope.isDeadLineToday = function(todo) {
        var _deadLine;
        _deadLine = new Date(todo.deadLine);
        return _deadLine.setHours(0, 0, 0, 0) === _today.setHours(0, 0, 0, 0);
      };
      $scope.createDeadLineHandler = function(todo) {
        return function(newDeadLine) {
          todo.deadLine = newDeadLine;
          return todo.$update();
        };
      };
      $scope.createTodo = function() {
        return $scope.showActive(true, function(todos) {
          return Todo.create({}, function(todo) {
            return $scope.todos.push(todo);
          });
        });
      };
      $scope.updateTodo = function(todo, callback, createNotification) {
        var loadingNotification;
        if (callback == null) {
          callback = null;
        }
        if (createNotification == null) {
          createNotification = true;
        }
        if (createNotification) {
          loadingNotification = todo.notifier().add('Сохраняется...', 'loading');
        }
        return todo.$update(function(todoData, getHeaders) {
          if (createNotification) {
            loadingNotification.remove();
            todo.notifier().add('Сохранено', 'standart', 1000, $scope);
          }
          if (callback != null) {
            return callback(todoData, getHeaders);
          }
        });
      };
      $scope.removeTodo = function(todo) {
        todo.$remove();
        return _removeItem($scope.todos, todo);
      };
      $scope.recoveryTodo = function(todo) {
        todo.removed = false;
        $scope.updateTodo(todo);
        return _removeItem($scope.todos, todo);
      };
      return $scope.setDefaultPosition = function(todo) {
        todo.clientX = 50;
        todo.clientY = 50;
        return $scope.updateTodo(todo);
      };
    }
  ]);

  exports = todoControllers;

}).call(this);
