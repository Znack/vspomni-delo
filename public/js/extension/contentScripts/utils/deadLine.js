// Generated by CoffeeScript 1.6.3
(function() {
  var DeadLine, config, _allDeadLineEventsHandler, _today,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _allDeadLineEventsHandler = [];

  _today = new Date();

  config = require('../../common.js').config;

  DeadLine = (function() {
    function DeadLine(todo) {
      var _this = this;
      this.todo = todo;
      this._createDeadLineEventHandler = __bind(this._createDeadLineEventHandler, this);
      this._addDeadLineEventsHandler = __bind(this._addDeadLineEventsHandler, this);
      this.createDeadLinePopupHandler = __bind(this.createDeadLinePopupHandler, this);
      this._addDeadLineEventsHandler();
      this.todo.deadLineHandler = function() {
        return _this;
      };
    }

    DeadLine.prototype.createDeadLinePopupHandler = function(newDeadLine) {
      this.todo.deadLine = newDeadLine;
      return this.todo.$update();
    };

    DeadLine.prototype.isDeadLineToday = function() {
      var _deadLine;
      _deadLine = new Date(this.todo.deadLine);
      return _deadLine.setHours(0, 0, 0, 0) === _today.setHours(0, 0, 0, 0);
    };

    DeadLine.prototype._addDeadLineEventsHandler = function() {
      var delay, timeDifference, _i, _len, _ref, _results;
      this.todo.deadLineSoonHandlers = [];
      timeDifference = new Date(this.todo.deadLine).getTime() - new Date();
      if (timeDifference > 0) {
        _ref = config.deadLineNotifications;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          delay = _ref[_i];
          if (delay === 0) {
            _createDeadLineEventHandler("Дело завершено", "У дела \"" + (this._getTodoExcerpt()) + "\" наступил срок завершения", timeDifference, 0);
          }
          if (timeDifference - delay > 0) {
            _results.push(_createDeadLineEventHandler("Скоро у вас завершится одно из дел", "Это дело: \"" + (this._getTodoExcerpt()) + "\"", timeDifference, delay));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };

    DeadLine.prototype._createDeadLineEventHandler = function(title, message, timeDifference, delay) {
      var deadLineSoonHandler;
      deadLineSoonHandler = {
        timeout: setTimeout(function() {
          return chrome.runtime.sendMessage({
            backendName: "notificationBackend",
            method: 'create',
            params: {
              type: "basic",
              title: title || "Скоро у вас завершится одно из дел",
              message: message || ("Это дело: " + (this._getTodoExcerpt())),
              iconUrl: "img/128x128.png",
              notificationName: "emptyTodolistNotification"
            }
          }, timeDifference - delay);
        }),
        delay: delay,
        todo: this.todo
      };
      this.todo.deadLineSoonHandlers.push(deadLineSoonHandler);
      return _allDeadLineEventsHandler.push(deadLineSoonHandler.timeout);
    };

    DeadLine.prototype._getTodoExcerpt = function() {
      if (this.todo.title.length > 50) {
        return "" + (this.todo.title.slice(0, 50)) + "..";
      }
      return this.todo.title;
    };

    DeadLine.removeDeadLineEventsHandler = function() {
      var handler, _i, _len;
      for (_i = 0, _len = _allDeadLineEventsHandler.length; _i < _len; _i++) {
        handler = _allDeadLineEventsHandler[_i];
        window.clearTimeout(handler);
      }
      return _allDeadLineEventsHandler = [];
    };

    return DeadLine;

  })();

  module.exports.DeadLine = DeadLine;

}).call(this);
