(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  module.exports.config = {
    site: {
      url: "http://vspomni-delo.ru",
      title: "Вспомни дело"
    },
    vk: {
      id: "4412700"
    }
  };

}).call(this);

},{}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  var exports, todoControllers, _removeItem, _today;

  todoControllers = angular.module('todoControllers', []);

  _today = new Date();

  _removeItem = function(arr, item) {
    var index;
    index = arr.indexOf(item);
    if (index > -1) {
      return arr.splice(index, 1);
    }
  };

  todoControllers.controller('TodoListCtrl', [
    '$scope', 'app', 'Todo', function($scope, app, Todo) {
      var _refreshCurrentTodos, _setLoadingStatus;
      $scope.todos = Todo.query();
      _setLoadingStatus = function() {
        var _allNotifications;
        _allNotifications = [];
        $scope.todos.forEach(function(todo) {
          return _allNotifications.push(todo.notifier().add("Загружается..", "loading"));
        });
        return _allNotifications;
      };
      _refreshCurrentTodos = function(showNotifications) {
        var allNotifications;
        if (showNotifications) {
          allNotifications = _setLoadingStatus();
        }
        return Todo.query(function(todos) {
          $scope.todos = todos;
          if (showNotifications) {
            return allNotifications.forEach(function(notification) {
              return notification.remove();
            });
          }
        });
      };
      window.addEventListener('focus', function() {
        app.tracker.sendEvent('Todos', 'Reload all todos', 'after widnow focus');
        return _refreshCurrentTodos(false);
      });
      chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
        if ("refresh" in request) {
          app.tracker.sendEvent('Todos', 'Reload all todos', 'after refresh order');
          _refreshCurrentTodos(true);
          return true;
        }
      });
      $scope.createDeadLineHandler = function(todo) {
        return function(newDeadLine) {
          todo.deadLine = newDeadLine;
          return todo.$update();
        };
      };
      $scope.isDeadLineToday = function(todo) {
        var _deadLine;
        _deadLine = new Date(todo.deadLine);
        return _deadLine.setHours(0, 0, 0, 0) === _today.setHours(0, 0, 0, 0);
      };
      $scope.createTodo = function() {
        return Todo.create({}, function(todo) {
          app.tracker.sendEvent('Todos', 'Create todo', '');
          return $scope.todos.push(todo);
        });
      };
      $scope.updateTodo = function(todo, callback, createNotification) {
        if (callback == null) {
          callback = null;
        }
        if (createNotification == null) {
          createNotification = true;
        }
        if (createNotification) {
          todo.notifier().add('Сохраняется...', 'loading');
        }
        return todo.$update(function(todoData, getHeaders) {
          app.tracker.sendEvent('Todos', 'Update todo', createNotification ? "with notification" : "without notification");
          if (createNotification) {
            todo.notifier().add('Сохранено', 'standart', $scope, 1000);
          }
          if (callback != null) {
            return callback(todoData, getHeaders);
          }
        });
      };
      return $scope.removeTodo = function(todo) {
        todo.$remove();
        app.tracker.sendEvent('Todos', 'Remove todo', '');
        return _removeItem($scope.todos, todo);
      };
    }
  ]);

  exports = todoControllers;

}).call(this);

},{}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  angular.module('contenteditableDirective', ['ngSanitize']).directive('contenteditable', [
    '$sce', 'app', function($sce, app) {
      return {
        restrict: 'A',
        require: '?ngModel',
        link: function(scope, element, attrs, ngModel) {
          var read;
          if (!ngModel) {
            return;
          }
          ngModel.$render = function() {
            return element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));
          };
          element.on('blur keyup change', function() {
            scope.$apply(read);
            return app.tracker.sendEvent('Todos', 'Blur todo editor', '');
          });
          return read = function() {
            var html;
            html = element.html();
            if (attrs.stripBr && html === '<br>') {
              html = '';
            }
            return ngModel.$setViewValue(html);
          };
        }
      };
    }
  ]);

}).call(this);

},{}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  angular.module('saveOnBlurDirective', []).directive('saveOnBlur', [
    function() {
      return {
        restrict: 'A',
        require: 'ngModel',
        link: function(scope, element, attrs) {
          return element.on('blur', function($event) {
            return scope.updateTodo(scope.todo);
          });
        }
      };
    }
  ]);

}).call(this);

},{}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  var todoPanelDirective;

  todoPanelDirective = angular.module('todoPanelDirective', []);

  todoPanelDirective.directive('todoPanel', [
    '$document', 'app', function($document, app) {
      return {
        restrict: 'A',
        link: function(scope, element, attrs) {
          var initialMouseX, initialMouseY, mousemove, mouseup, startX, startY, todoElement;
          todoElement = element.parent();
          startY = scope.todo.clientY;
          startX = scope.todo.clientX;
          initialMouseX = 0;
          initialMouseY = 0;
          todoElement.css({
            position: 'fixed',
            top: startY,
            left: startX
          });
          mousemove = function($event) {
            var dx, dy;
            dx = $event.clientX - initialMouseX;
            dy = $event.clientY - initialMouseY;
            todoElement.css({
              top: startY + dy + 'px',
              left: startX + dx + 'px'
            });
            return false;
          };
          mouseup = function() {
            var position;
            position = todoElement.position();
            scope.todo.clientX = position.left;
            scope.todo.clientY = position.top;
            scope.updateTodo(scope.todo, angular.noop, false);
            $document.unbind('mousemove', mousemove);
            $document.unbind('mouseup', mouseup);
            return app.tracker.sendEvent('Todos', 'Replaced todo window', "to x:" + position.left + " and y:" + position.top);
          };
          return element.bind('mousedown', function($event) {
            startX = todoElement.prop('offsetLeft');
            startY = todoElement.prop('offsetTop');
            initialMouseX = $event.clientX;
            initialMouseY = $event.clientY;
            $document.bind('mousemove', mousemove);
            $document.bind('mouseup', mouseup);
            return false;
          });
        }
      };
    }
  ]);

  module.exports = todoPanelDirective;

}).call(this);

},{}],6:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  var widthConfigurableDirective;

  widthConfigurableDirective = angular.module('widthConfigurableDirective', []);

  widthConfigurableDirective.directive('widthConfigurable', [
    '$document', 'app', function($document, app) {
      return {
        restrict: 'A',
        link: function(scope, element, attrs) {
          var initialMouseX, mousemove, mouseup, regulator, startWidth, todoElement;
          todoElement = element;
          regulator = angular.element('<div class="width-regulator"/>');
          todoElement.append(regulator);
          startWidth = scope.todo.width;
          initialMouseX = 0;
          todoElement.css('width', startWidth);
          mousemove = function($event) {
            var dx;
            dx = $event.clientX - initialMouseX;
            todoElement.css({
              width: startWidth + dx + 'px'
            });
            return false;
          };
          mouseup = function() {
            scope.todo.width = parseInt(todoElement.width());
            scope.updateTodo(scope.todo, angular.noop, false);
            $document.unbind('mousemove', mousemove);
            $document.unbind('mouseup', mouseup);
            return app.tracker.sendEvent('Todos', 'Configure todo width', "to value:" + scope.todo.width);
          };
          return regulator.bind('mousedown', function($event) {
            startWidth = todoElement.width();
            initialMouseX = $event.clientX;
            $document.bind('mousemove', mousemove);
            $document.bind('mouseup', mouseup);
            return false;
          });
        }
      };
    }
  ]);

  module.exports = widthConfigurableDirective;

}).call(this);

},{}],7:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  var checkAuth, config, createApp, getCookie, init;

  config = require('../common.js').config;

  require('./services/todo.js');

  require('./controllers/todo.js');

  require('./directives/todoPanel.js');

  require('./directives/contenteditable.js');

  require('./directives/saveOnBlur.js');

  require('./directives/widthConfigurable.js');

  init = function() {
    var app;
    app = {
      working: false,
      site: config.site
    };
    app.service = analytics.getService('chrome_extension');
    app.tracker = app.service.getTracker('UA-54177324-2');
    chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
      if ("statusChecking" in request) {
        return sendResponse({
          isWorking: app.working
        });
      }
    });
    return getCookie(app);
  };

  getCookie = function(app) {
    return chrome.runtime.sendMessage({
      backendName: "authBackend",
      method: 'getCookie'
    }, function(response) {
      app.cookie = response.cookie;
      return checkAuth(app);
    });
  };

  checkAuth = function(app) {
    return chrome.runtime.sendMessage({
      backendName: "authBackend",
      method: 'checkAuth'
    }, function(response) {
      if (response.user != null) {
        app.user = response.user;
        return createApp(app);
      } else {
        return app.tracker.sendEvent('Error in extension', 'Content script opened by anonymous', '');
      }
    });
  };

  createApp = function(app) {
    return chrome.runtime.sendMessage({
      backendName: "angularBackend",
      method: "getFrameTemplate"
    }, function(response) {
      var body, element;
      element = document.createElement('div');
      element.innerHTML = response.template;
      body = document.getElementsByTagName('body')[0];
      body.appendChild(element);
      angular.module('config', []).value('app', app);
      angular.module('todo', ['ngResource', 'ngCookies', 'ui.bootstrap.datetimepicker', 'config', 'todoPanelDirective', 'saveOnBlurDirective', 'contenteditableDirective', 'widthConfigurableDirective', 'todoServices', 'todoControllers']).config([
        '$compileProvider', function($compileProvider) {
          var currentImgSrcSanitizationWhitelist, newImgSrcSanitizationWhiteList;
          currentImgSrcSanitizationWhitelist = $compileProvider.imgSrcSanitizationWhitelist();
          newImgSrcSanitizationWhiteList = currentImgSrcSanitizationWhitelist.toString().slice(0, -1) + '|chrome-extension:' + currentImgSrcSanitizationWhitelist.toString().slice(-1);
          return $compileProvider.imgSrcSanitizationWhitelist(newImgSrcSanitizationWhiteList);
        }
      ]).run([
        '$cookieStore', '$rootScope', function($cookieStore, $rootScope) {
          $cookieStore.put('sid', app.cookie.value);
          $rootScope.app = app;
          app.working = true;
          return app.tracker.sendAppView('ContentScript');
        }
      ]);
      return angular.bootstrap(element, ['todo']);
    });
  };

  init();

}).call(this);

},{"../common.js":1,"./controllers/todo.js":2,"./directives/contenteditable.js":3,"./directives/saveOnBlur.js":4,"./directives/todoPanel.js":5,"./directives/widthConfigurable.js":6,"./services/todo.js":10}],8:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  module.exports = function(response) {
    if (response.resource instanceof Array && !response.resource.length) {
      chrome.runtime.sendMessage({
        backendName: "notificationBackend",
        method: 'create',
        params: {
          type: "basic",
          title: "У вас нет созданных дел",
          message: "Нажмите на иконку расширения и кликните \"Создать новое дело\"",
          iconUrl: "img/128x128.png",
          notificationName: "emptyTodolistNotification"
        }
      }, function(response) {});
    }
    return response;
  };

}).call(this);

},{}],9:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  var Notification;

  Notification = require('../../utils/notification');

  module.exports = function(response) {
    var notification;
    if (response.resource instanceof Array) {
      response.resource.forEach(function(todo) {
        var notification;
        notification = new Notification();
        return todo.notifier = function() {
          return notification;
        };
      });
    } else {
      notification = new Notification();
      response.resource.notifier = function() {
        return notification;
      };
    }
    return response.resource;
  };

}).call(this);

},{"../../utils/notification":11}],10:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  var emptyTodolistInterceptor, interceptor, notificationInterceptor, todoServices;

  notificationInterceptor = require('./interceptors/notification.js');

  emptyTodolistInterceptor = require('./interceptors/emptyTodolist.js');

  interceptor = {
    response: function(response) {
      notificationInterceptor(response);
      emptyTodolistInterceptor(response);
      return response.resource;
    }
  };

  todoServices = angular.module('todoServices', ['ngResource']).factory('Todo', function($resource, app) {
    return $resource("" + app.site.url + "/todos/:todoId", {}, {
      query: {
        method: 'GET',
        params: {
          todoId: ''
        },
        isArray: true,
        interceptor: interceptor
      },
      create: {
        method: 'PUT',
        params: {
          todoId: ''
        }
      },
      update: {
        method: 'POST',
        params: {
          todoId: '@_id'
        },
        interceptor: interceptor
      },
      remove: {
        method: 'DELETE',
        params: {
          todoId: '@_id'
        }
      }
    });
  });

  module.exports = todoServices;

}).call(this);

},{"./interceptors/emptyTodolist.js":8,"./interceptors/notification.js":9}],11:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  var ALLOWED_TYPES, Notification,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ALLOWED_TYPES = ["standart", "warning", "loading"];

  Notification = (function() {
    function Notification() {
      this.createNotificationObject = __bind(this.createNotificationObject, this);
      this._notifications = [];
    }

    Notification.prototype.findSimilar = function(type) {
      var notification, _i, _len, _ref;
      _ref = this._notifications;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        notification = _ref[_i];
        if (notification.type === type) {
          return notification;
        }
      }
      return false;
    };

    Notification.prototype.createNotificationObject = function(text, type) {
      var notificationObject,
        _this = this;
      notificationObject = {
        text: text
      };
      if (__indexOf.call(ALLOWED_TYPES, type) >= 0) {
        notificationObject.type = type;
      } else {
        notificationObject.type = void 0;
      }
      notificationObject.remove = function() {
        return _this._notifications.splice(_this._notifications.indexOf(notificationObject), 1);
      };
      return notificationObject;
    };

    Notification.prototype.add = function(text, type, scope, timeout) {
      var notificationObject, similar;
      if (type == null) {
        type = 'standart';
      }
      if (scope == null) {
        scope = {};
      }
      if (timeout == null) {
        timeout = null;
      }
      similar = this.findSimilar(type);
      if (similar) {
        return similar;
      }
      notificationObject = this.createNotificationObject(text, type);
      this._notifications.push(notificationObject);
      if (timeout) {
        setTimeout(function() {
          notificationObject.remove();
          if (scope && scope.$apply) {
            return scope.$apply();
          }
        }, timeout);
      }
      return notificationObject;
    };

    Notification.prototype.all = function() {
      return this._notifications;
    };

    return Notification;

  })();

  module.exports = Notification;

}).call(this);

},{}]},{},[7])